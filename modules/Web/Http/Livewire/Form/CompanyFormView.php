<?php

namespace Modules\Web\Http\Livewire\Form;

use Modules\Web\Models\Company;
use Modules\Web\Models\Country;
use Modules\Web\Repositories\CompanyRepository;

class CompanyFormView extends BaseFormView
{
    protected string $repositoryClass = CompanyRepository::class;

    public string $permissionForShow = 'web.settings.company.show';

    public string $permissionForDeleting = 'web.settings.company.delete';

    public string $recordsRoute = 'lawoo.settings.companies.records';

    public string $recordRoute = 'lawoo.settings.companies.records.view';

//    public bool $showMessages = true;

    public function loadData(): void
    {
        parent::loadData(); // TODO: Change the autogenerated stub
        if ($this->record) {
            $this->data['country_id'] = $this->record->country_id;
            $this->fields['tabs']['tab_two']['fields']['children']['items'] = $this->record->children;
        }
        $this->fields['parent_id']['options'] = $this->getCompanies();
    }

    public function setFields(): void
    {
        $this->fields = [
            'name' => [
                'label' => __t('Name', 'Web'),
                'type' => 'input',
                'class' => 'lg:col-span-6',
            ],
            'image' => [
                'label' => __t('Logo', 'Web'),
                'type' => 'fileUploader',
                'mode' => 'image',
                'glightbox' => true,
                'accept' => 'image/jpeg,image/png,image/gif,image/webp',
                'imageClass' => 'w-20 h-20',
                'model' => '',
                'class' => 'lg:col-span-6',
            ],
            'parent_id' => [
                'label' => __t('Parent company', 'Web'),
                'type' => 'select',
                'class' => 'lg:col-span-6',
                'options' => [],
            ],
            'is_active' => [
                'label' => __t('Active', 'Web'),
                'type' => 'switch',
                'class' => 'lg:col-span-6',
                'default' => true,
            ],
            'tabs' => [
                'tab_one' => [
                    'label' => __t('Contact data', 'Web'),
                    'class' => 'w-full grid grid-cols-1 lg:grid-cols-12 gap-4',
                    'fields' => [
                        'street' => [
                            'label' => __t('Street, No', 'Web'),
                            'type' => 'input',
                            'class' => 'lg:col-span-6',
                        ],
                        'street_2' => [
                            'label' => __t('Street 2', 'Web'),
                            'type' => 'input',
                            'class' => 'lg:col-span-6',
                        ],
                        'zip' => [
                            'label' => __t('Zip', 'Web'),
                            'type' => 'input',
                            'class' => 'lg:col-span-6',
                        ],
                        'city' => [
                            'label' => __t('City', 'Web'),
                            'type' => 'input',
                            'class' => 'lg:col-span-6',
                        ],
                        'country_id' => [
                            'label' => __t('Country', 'Web'),
                            'type' => 'select',
                            'class' => 'lg:col-span-6',
                            'options' => $this->getCountries(),
                        ],
                        'phone' => [
                            'label' => __t('Phone', 'Web'),
                            'type' => 'input',
                            'class' => 'lg:col-span-6',
                        ],
                        'mobile' => [
                            'label' => __t('Mobile', 'Web'),
                            'type' => 'input',
                            'class' => 'lg:col-span-6',
                        ],
                        'email' => [
                            'label' => __t('Email', 'Web'),
                            'type' => 'input',
                            'class' => 'lg:col-span-6',
                        ],
                        'website' => [
                            'label' => __t('Website', 'Web'),
                            'type' => 'input',
                            'class' => 'lg:col-span-6',
                        ],
                        'company_nr' => [
                            'label' => __t('Company Nr.', 'Web'),
                            'type' => 'input',
                            'class' => 'lg:col-span-6',
                        ],
                        'tax_nr' => [
                            'label' => __t('Tax Nr.', 'Web'),
                            'type' => 'input',
                            'class' => 'lg:col-span-6',
                        ],
                    ],
                ],
                'tab_two' => [
                    'label' => __t('Subcontractor', 'Web'),
                    'class' => 'lg:col-span-12',
                    'fields' => [
                        'children' => [
                            'label' => __t('Subcontractor', 'Web'),
                            'type' => 'cards',
                            'class' => 'lg:col-span-12',
                            'component' => 'web.cards.company',
                            'items' => [],
                            'model' => Company::class,
                            'modal' => [
                                'livewire' => 'web.form.company-form-view',
                                'widthClass' => 'w-full',
                            ]
                        ]
                    ]
                ]
            ],
        ];
    }

    public function setRules(): void
    {
        $this->rules = [
            'data.name' => 'required',
        ];
    }

    public function getCompanies(): array
    {
        $companies = Company::active();
        if($this->record) {
            $companies->where('id', '!=', $this->record->id);
        }
        return $companies->pluck('name', 'id')->toArray();
    }

    public function getCountries(): array
    {
        return Country::active()->get()->mapWithKeys(fn($item) => [$item->id => $item->name])->toArray();
    }

    public function save(): void
    {
        parent::save();
        $this->dispatch('companies-refresh');
    }

    public function deleteRecord(): void
    {
        parent::deleteRecord();
        $this->dispatch('companies-refresh');
    }

    public function deleteSub(int $id): void
    {
        if ($this->permissionForDeleting !== '') {
            $this->resolveRepository()->authorize($this->permissionForDeleting);
        }

        $ids = [$id];
        $this->resolveRepository()->delete($ids);
        $this->loadData();

        $this->dispatch('companies-refresh');
    }

}
